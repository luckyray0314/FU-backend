import { SurveyStatus } from 'src/core/enums/survey-status';
import { OccasionIndex } from 'src/core/models/occasion.modal';
import { FollowUpDataService } from 'src/follow-up-survey/follow-up-data.service';
import { ScoreService } from 'src/score/score.service';
import { BackgroundDataDto, BackgroundMetadataDto, BackgroundSurveyBasicDataDto } from './background-data.dto';
import { BackgroundMetadataService } from './background-metadata.service';
import { EducationVh1Service } from './education-vh1/education-vh1.service';
import { SelectedEducationVh1Service } from './education-vh1/selected-education-vh1.service';
import { EducationVh2Service } from './education-vh2/education-vh2.service';
import { SelectedEducationVh2Service } from './education-vh2/selected-education-vh2.service';
import { EmploymentVh1Service } from './employment-vh1/employment-vh1.service';
import { SelectedEmploymentVh1Service } from './employment-vh1/selected-employment-vh1.service';
import { EmploymentVh2Service } from './employment-vh2/employment-vh2.service';
import { SelectedEmploymentVh2Service } from './employment-vh2/selected-employment-vh2.service';
import { EstablishedDiagnosesService } from './established-diagnoses/established-diagnoses.service';
import { SelectedEstablishedDiagnosesService } from './established-diagnoses/selected-established-diagnoses.service';
import { FamilyConstellationService } from './family-constellation/family-constellation.service';
import { SelectedFamilyConstellationService } from './family-constellation/selected-family-constellation.service';
import { GenderService } from './gender/gender.service';
import { SelectedGenderService } from './gender/selected-gender.service';
import { InterpreterRequiredService } from './interpreter-required/interpreter-required.service';
import { SelectedInterpreterRequiredService } from './interpreter-required/selected-interpreter-required.service';
import { OtherInterventionsService } from './other-interventions/other-interventions.service';
import { SelectedOtherInterventionsService } from './other-interventions/selected-other-interventions.service';
import { PreviousInterventionService } from './previous-intervention/previous-intervention.service';
import { SelectedPreviousInterventionService } from './previous-intervention/selected-previous-intervention.service';
import { ProblemAreaService } from './problem-area/problem-area.service';
import { SelectedProblemAreaService } from './problem-area/selected-problem-area.service';
import { ReasonForUpdateService } from './reason-for-update/reason-for-update.service';
import { SelectedReasonForUpdateService } from './reason-for-update/selected-reason-for-update.service';
import { SchoolUniformService } from './school-uniform/school-uniform.service';
import { SelectedSchoolUniformService } from './school-uniform/selected-school-uniform.service';
import { SelectedTypeOfEffortService } from './type-of-effort/selected-type-of-effort.service';
import { TypeOfEffortService } from './type-of-effort/type-of-effort.service';
import { SelectedWhoParticipatesService } from './who-participates/selected-who-participates.service';
import { WhoParticipatesService } from './who-participates/who-participates.service';
export declare class BackgroundDataService {
    backgroundMetadataService: BackgroundMetadataService;
    scoreService: ScoreService;
    followUpService: FollowUpDataService;
    genderService: GenderService;
    educationVh1Service: EducationVh1Service;
    educationVh2Service: EducationVh2Service;
    employmentVh1Service: EmploymentVh1Service;
    employmentVh2Service: EmploymentVh2Service;
    establishedDiagnosesService: EstablishedDiagnosesService;
    familyConstellationService: FamilyConstellationService;
    interpreterRequiredService: InterpreterRequiredService;
    otherInterventionsService: OtherInterventionsService;
    previousInterventionService: PreviousInterventionService;
    problemAreaService: ProblemAreaService;
    reasonForUpdateService: ReasonForUpdateService;
    schoolUniformService: SchoolUniformService;
    typeOfEffortService: TypeOfEffortService;
    whoParticipatesService: WhoParticipatesService;
    selectedGenderService: SelectedGenderService;
    selectedEducationVh1Service: SelectedEducationVh1Service;
    selectedEducationVh2Service: SelectedEducationVh2Service;
    selectedEmploymentVh1Service: SelectedEmploymentVh1Service;
    selectedEmploymentVh2Service: SelectedEmploymentVh2Service;
    selectedEstablishedDiagnosesService: SelectedEstablishedDiagnosesService;
    selectedFamilyConstellationService: SelectedFamilyConstellationService;
    selectedInterpreterRequiredService: SelectedInterpreterRequiredService;
    selectedOtherInterventionsService: SelectedOtherInterventionsService;
    selectedPreviousInterventionService: SelectedPreviousInterventionService;
    selectedProblemAreaService: SelectedProblemAreaService;
    selectedReasonForUpdateService: SelectedReasonForUpdateService;
    selectedSchoolUniformService: SelectedSchoolUniformService;
    selectedTypeOfEffortService: SelectedTypeOfEffortService;
    selectedWhoParticipatesService: SelectedWhoParticipatesService;
    constructor(backgroundMetadataService: BackgroundMetadataService, scoreService: ScoreService, followUpService: FollowUpDataService, genderService: GenderService, educationVh1Service: EducationVh1Service, educationVh2Service: EducationVh2Service, employmentVh1Service: EmploymentVh1Service, employmentVh2Service: EmploymentVh2Service, establishedDiagnosesService: EstablishedDiagnosesService, familyConstellationService: FamilyConstellationService, interpreterRequiredService: InterpreterRequiredService, otherInterventionsService: OtherInterventionsService, previousInterventionService: PreviousInterventionService, problemAreaService: ProblemAreaService, reasonForUpdateService: ReasonForUpdateService, schoolUniformService: SchoolUniformService, typeOfEffortService: TypeOfEffortService, whoParticipatesService: WhoParticipatesService, selectedGenderService: SelectedGenderService, selectedEducationVh1Service: SelectedEducationVh1Service, selectedEducationVh2Service: SelectedEducationVh2Service, selectedEmploymentVh1Service: SelectedEmploymentVh1Service, selectedEmploymentVh2Service: SelectedEmploymentVh2Service, selectedEstablishedDiagnosesService: SelectedEstablishedDiagnosesService, selectedFamilyConstellationService: SelectedFamilyConstellationService, selectedInterpreterRequiredService: SelectedInterpreterRequiredService, selectedOtherInterventionsService: SelectedOtherInterventionsService, selectedPreviousInterventionService: SelectedPreviousInterventionService, selectedProblemAreaService: SelectedProblemAreaService, selectedReasonForUpdateService: SelectedReasonForUpdateService, selectedSchoolUniformService: SelectedSchoolUniformService, selectedTypeOfEffortService: SelectedTypeOfEffortService, selectedWhoParticipatesService: SelectedWhoParticipatesService);
    basicData(): Promise<BackgroundSurveyBasicDataDto>;
    metadata(): Promise<BackgroundMetadataDto[]>;
    create(payload: BackgroundDataDto): Promise<boolean>;
    get(codeNumber: string): Promise<BackgroundDataDto>;
    getCaseList(): Promise<{
        codeNumber: string;
        status: SurveyStatus;
        signal: string;
        missedFields: string;
        history: {
            zeroMonth: {
                date: Date;
                statusInDetail: {
                    child: SurveyStatus;
                    careGiver1: SurveyStatus;
                    careGiver2: SurveyStatus;
                };
            };
            sixMonths: {
                date: Date;
                statusInDetail: {
                    child: SurveyStatus;
                    careGiver1: SurveyStatus;
                    careGiver2: SurveyStatus;
                };
            };
            twelveMonths: {
                date: Date;
                statusInDetail: {
                    child: SurveyStatus;
                    careGiver1: SurveyStatus;
                    careGiver2: SurveyStatus;
                };
            };
        };
        nextSurvey: string;
    }[]>;
    downloadDocx(codeNumber: string, occasion: OccasionIndex | 0, appDomain: string, childUri: string, firstGuardianUri: string, secondGuardianUri: string, importantEventsUri: string): Promise<string>;
}
